<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Menu Options
menu[0]="Full Story";
menu[1]="Chapter 1";
menu[2]="Chapter 2";
menu[3]="Chapter 3";
menu[4]="Chapter 4";


//Menu Variables
menu_length=array_length_1d(menu);//This dynamically matches the amount of menu options
space = 32;//default spacing value used for drawing boxes
menu_position=0;//default position
l=0; //Longest pixel width amongst menu options
//This is needed to determine how wide the menu should be.
for(i=0; i &lt; array_length_1d(menu); i += 1)
{
if(string_width(string(menu[i]))&gt;l)
{
    l=string_width(string(menu[i]));
}
}
//fade in
a=0;
fly_off=false;
x_fly=0;
fade_out=0;
//cylce images
//relevent for menu cursor that has animation
/*
alarm[0]=room_speed*0.5;
image_speed=0;
image=0;
*/
//Button variables

move = 0;
push=0;
push_end=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the up and down keys, or w and s, move the menu marker up and down
if(fly_off==false)
{
    //this subtracts 1 from move when 1 of the buttons is pressed
    move -= max(keyboard_check_pressed(vk_up),keyboard_check_pressed(ord("W")),0);

    //this adds 1 to move when 1 of the buttons is pressed
    move += max(keyboard_check_pressed(vk_down),keyboard_check_pressed(ord("S")),0);

    if (move != 0)
    {
        menu_position += move;
        //this if statement lets you scroll down off the menu to get to the top of the menu
        if (menu_position&lt;0) 
            menu_position = array_length_1d(menu) -1;
        //this does the same but in reverse
        if (menu_position&gt;array_length_1d(menu) -1) 
            menu_position = 0;
        move=0;
    }
    //enter or space selects something on the menu
    push = max(keyboard_check_released(vk_enter),keyboard_check_released(vk_space),0);
    if (push == 1) 
    {
        fly_off=true;
    }  
  
    //This controls fade in
    //a is short for image_alpha
    if(a&lt;1)
    {
        a+=0.05;
    }
}
else
{
    if(fade_out==false)
    {
        x_fly+=6;
        if(x+x_fly&gt;room_width+sprite_width)
        {
            fade_out=true;
        }
    }
    else
    {
        a-=0.05;
        background_alpha-=0.05;
        if(a==0)
        {
            scr_chapter_select();
            instance_destroy();
        }
    }
}

push_end = max(keyboard_check_released(vk_escape),0)
if (push_end == 1) 
{
game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(font_main_menu);

//set alpha allows us to fade the image in
draw_set_alpha(a);

//if we want a box around the main menu, this code would do that
/*
draw_set_color(c_black); //Background
draw_rectangle(x-space, y-space, x+l+(space*4), y+((array_length_1d(menu)+1) * space)-space, false);
draw_set_color(c_white); //Border
draw_rectangle(x-space, y-space, x+l+(space*4), y+((array_length_1d(menu)+1) * space)-space, true);
*/
draw_set_color(c_white);
for(i=0; i &lt; array_length_1d(menu); i += 1)
{
    draw_text(x +space, y + (i * space), string(menu[i]));
}
if(fly_off==false)
{
draw_sprite(sprite_index, 0, x, y+(menu_position * space));
}
else
{
draw_sprite(sprite_index,0, x+x_fly, y+(menu_position * space));
}

//when we get a title, here is the code for drawing that.
//draw_sprite(spr_title,0,512,256);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
